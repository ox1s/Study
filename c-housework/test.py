#!/bin/python

import os
import sys
import subprocess
import glob
import re

class Colors:
    CYAN = '\033[1;36m'
    GREEN = '\033[1;32m'
    YELLOW = '\033[1;33m'
    RED = '\033[1;31m'
    PURPLE = '\033[1;35m'
    BOLD = '\033[1m'
    NC = '\033[0m'

def find_available_problems():
    """–ù–∞—Ö–æ–¥–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ —à–∞–±–ª–æ–Ω—É problem_*.c –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏—Ö –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã."""
    problems = {}
    for c_file in glob.glob("dproblem_*/problem_*.c"):
        match = re.search(r'problem_([a-zA-Z0-9_]+)\.c', c_file)
        if match:
            abbreviation = match.group(1)
            test_dir = f"tests_{abbreviation}"
            if os.path.isdir(test_dir):
                problems[abbreviation] = {
                    "c_file": c_file,
                    "test_dir": test_dir
                }
    return problems

def compile_program(c_file, exec_name):
    """–ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç .c —Ñ–∞–π–ª –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π."""
    print(f"\n{Colors.YELLOW}üè≠ –ö–æ–º–ø–∏–ª—è—Ü–∏—è {c_file} —Å –ø–æ–º–æ—â—å—é gcc...{Colors.NC}")
    try:
        result = subprocess.run(
            ["gcc", "-Wall", "-Werror", c_file, "-o", exec_name, "-lm"],
            capture_output=True, text=True, check=True
        )
        print(f"{Colors.GREEN}ü´µüëå –£—Å–ø–µ—à–Ω–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–æ –≤ {exec_name}{Colors.NC}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"{Colors.RED}ü•µ –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏!{Colors.NC}")
        print(e.stderr)
        return False
    except FileNotFoundError:
        print(f"{Colors.RED}üíÄ –ö–æ–º–∞–Ω–¥–∞ 'gcc' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH.{Colors.NC}")
        return False


def run_tests(exec_name, folder_name, show_details):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    print(f"\n{Colors.CYAN}{Colors.BOLD}üëæ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ {folder_name}{Colors.NC}")

    passed_count = 0
    failed_count = 0
    no_ans_count = 0

    test_files = sorted(glob.glob(os.path.join(folder_name, '*.dat')))

    if not test_files:
        print(f"\n{Colors.YELLOW}ü§î –í –ø–∞–ø–∫–µ '{folder_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ .dat —Ñ–∞–π–ª–∞.{Colors.NC}")
        return

    for test_file in test_files:
        ans_file = os.path.splitext(test_file)[0] + ".ans"
        base_name = os.path.basename(test_file)

        with open(test_file, 'r') as f:
            program_input = f.read()

        try:
            result = subprocess.run(
                [f"./{exec_name}"],
                input=program_input,
                capture_output=True, text=True, timeout=5  
                )
            program_output = result.stdout.strip()

            if os.path.exists(ans_file):
                with open(ans_file, 'r') as f:
                    expected_output = f.read().strip()

                if program_output == expected_output:
                    passed_count += 1
                    if show_details:
                        print(f"\n{Colors.BOLD}–¢–µ—Å—Ç: {test_file}{Colors.NC}")
                        print(f"–í–≤–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n{program_input}")
                        print(f"{Colors.GREEN}‚úÖ –û–ö{Colors.NC}")
                        print(f"{Colors.YELLOW}–í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã:{Colors.NC}\n{program_output}")
                    else:
                        print(f"{Colors.GREEN}‚úÖ –¢–µ—Å—Ç {base_name} ... OK{Colors.NC}")
                else:
                    failed_count += 1
                    print(f"\n{Colors.BOLD}–¢–µ—Å—Ç: {test_file}{Colors.NC}")
                    print(f"–í–≤–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n{program_input}")
                    print(f"{Colors.RED}–í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã:{Colors.NC}\n{program_output}")
                    print(f"{Colors.RED}‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –û–∂–∏–¥–∞–ª–æ—Å—å ({os.path.basename(ans_file)}):{Colors.NC}\n{expected_output}")
            else:
                no_ans_count += 1
                print(f"\n{Colors.BOLD}–¢–µ—Å—Ç: {test_file} (–Ω–µ—Ç .ans —Ñ–∞–π–ª–∞ –¥–ª—è —Å–≤–µ—Ä–∫–∏){Colors.NC}")
                print(f"{Colors.YELLOW}–í—ã–≤–æ–¥:{Colors.NC}\n{program_output}")

        except subprocess.TimeoutExpired:
            failed_count += 1
            print(f"\n{Colors.RED}‚ùå –¢–µ—Å—Ç {base_name} ... –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è!{Colors.NC}")
        except Exception as e:
            failed_count += 1
            print(f"\n{Colors.RED}‚ùå –¢–µ—Å—Ç {base_name} ... –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}{Colors.NC}")


    print(f"\n{Colors.CYAN}{Colors.BOLD}üèÅ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!{Colors.NC}")
    print(f"{Colors.GREEN}–ü—Ä–æ—à–ª–æ: {passed_count}{Colors.NC} | {Colors.RED}–ó–∞–≤–∞–ª–µ–Ω–æ: {failed_count}{Colors.NC} | {Colors.YELLOW}–ë–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏: {no_ans_count}{Colors.NC}\n")


def main():
    available_problems = find_available_problems()

    if not available_problems:
        print(f"{Colors.RED}üíÄ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –µ—Å—Ç—å —Ñ–∞–π–ª—ã 'problem_*.c' –∏ –ø–∞–ø–∫–∏ 'tests_*'.{Colors.NC}")
        sys.exit(1)

    print(f"{Colors.CYAN}{Colors.BOLD}üßê –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:{Colors.NC}")
    for abbr in sorted(available_problems.keys()):
        print(f"  - {abbr}")

    try:
        abbr_input = input(f"\n{Colors.PURPLE}‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É –∑–∞–¥–∞—á–∏: {Colors.NC}")
    except KeyboardInterrupt:
        print("\n–í—ã—Ö–æ–¥.")
        sys.exit(0)


    if abbr_input not in available_problems:
        print(f"{Colors.RED}üôä –ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏. –í—ã –≤–≤–µ–ª–∏: {abbr_input}{Colors.NC}")
        sys.exit(1)

    problem = available_problems[abbr_input]
    c_file = problem["c_file"]
    test_dir = problem["test_dir"]
    exec_name = os.path.splitext(c_file)[0]

    if not compile_program(c_file, exec_name):
        sys.exit(1)

    try:
        details_input = input(f"\n{Colors.PURPLE}‚ú® –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤? (y/n): {Colors.NC}").lower()
    except KeyboardInterrupt:
        print("\n–í—ã—Ö–æ–¥.")
        sys.exit(0)
        
    show_details = details_input == 'y'

    run_tests(exec_name, test_dir, show_details)


if __name__ == "__main__":
    main()
